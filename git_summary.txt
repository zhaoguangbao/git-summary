git学习总结

注：注意每次命令执行后的输出，会提示接下来可能用到的操作
环境变量的配置
	在家目录：/c/Users/光宝
		由pwd打印出的目录与windows目录C:/Users/光宝相比容易得出这两者表达形式相同，两者均可以用来切换工作目录
	cat .gitconfig
		该文件包含了一些配置信息
	# 相应的配置命令
	git config --global user.name [your name]
	git config --global user.email [your email]
	git config --global color.ui=auto
	...
	可以方便的利用
	git config --help打开帮助文档
	git help [command] 打开对应命令的帮助文档
git版本库的两种创建方式
	1.先在本地初始化创建一个仓库再与远程库进行绑定连接
	2.直接创建远程库在本地进行克隆
方式一
	# 创建工作空间
	mkdir git_ws
	cd git_ws
	# 工作空间初始化——创建本地仓库
	# 先创建本地库的方式必须有该命令
	# 方式二则不需要该命令
	git init

	# 创建你的文本文件
	# ...
	
	# 添加远程库
	# 在github中创建新的仓库
	# 按照导入操作进行
	git remote add origin [the URL of your repository] / http协议相对于git可能访问速度会慢
	# git remote add origin git@github.com:zhaoguangbao/learngit.git更快
	
	# 推送本地库到远程库（默认的远程库的标识符为origin）
	# 远程库是空的，第一次推送master分支时，加上了-u参数
	# Git不但会把本地的master分支内容推送的远程新的master分支
	# 还会把本地的master分支和远程的master分支关联起来
	# 在以后的推送或者拉取时就可以简化命令
	git push -u origin master
	
方式二
	# 创建远程库（此时可以选择勾选Initialize this repository with a README）
	
	# 克隆本地库
	git clone [the URL of your repository]
	
常用命令
	# 查看当前库的状态（git跟踪的是文本文件的修改）
	git status
	
	# 将文件导入暂存区（stage）
	git add [filename]
	# 将文件由暂存区导入本地版本库
	git commit -m "message about this commit"
	# 等价于
	git commit -am "message abot this commit"
	
	注：
		1.可以多次git add即将多个文件导入到暂存区，一次git commit导入到版本库
		git add [filename1] [filename2] ...
		git commit -m "message"
		
		2.git commit可以直接执行，执行后将会自动打开编辑器，将提示信息写下即可
	
	# 显示版本库内文件的改变
	git diff
	# git diff只对已存文件的变化做出反应，对新建的文件并不会输出信息
		
	注：
		1.一般在git add / git commit前调用git diff以及git status判断是否更改正确
		2.git status告诉你有文件被修改过，git diff可以查看修改内容
		
	# 显示提交的历史记录	
	git log / git log --graph /git reflog

	# 复原到先前的某个状态
	git reset --hard [哈希值]
	
	注：
		1.HEAD指向最近更改提交的指针，HEAD^倒数第一次，HEAD^^倒数第二次，HEAD~100倒数第100次
	
	
	# 分支管理
	git branch # 查看本地的分支
	git branch dev # 创建本地dev分支
	git branch -d dev # 删除dev分支
	git checkout -b dev # 创建本地dev分支，并进行切换
	git branch -a # 显示本地及远端的所有分支
	git push origin dev # 向远端推送分支
	
		# git branch示例
		git checkout -b dev
		vim [filename]
		git add [filename]
		git commit -m "message" # 该message会显示在git log中
		git push origin dev # 同步本地库与远程库的dev分支
				# 注：在分支中的操作与master中完全一致
		git checkout master
		git merge dev # 在master中合并dev
		git push origin master # 同步本地库与远程库


	# 标签的使用
	git tag v1.0 #创建git标签
	git tag -a v1.0 -m "message" # 创建带有一定信息的标签
	git show v1.0 # 显示tag的相关信息
	git push origin --tags # 将本地标签同步到远程端
	
	# 返回到过去或将来的位置点
	git reset --hard [HEAD]/[commit_id]
	# 查看远端库的信息
	git remote # 若有远端库则显示远端库的标识符
	git remote -v # 显示远端库的详细地址URL

一些其他的知识点
	# 1.虽然安装的git默认的编辑器为vim，但同样可利用其他编辑器对文件进行编辑，git一样可以发现文件被修改
	# 2.关于.git/文件夹的介绍
		在创建本地库后会自动出现.git/文件夹
		.git/index: 缓存区stage，二进制文件，用notepad++打开为乱码，但大致可以看出stage包含过的文件
		.git/objects: 本地库中的文件，为加密文件
	# 3.关于环境变量的配置
		安装目录下的etc/文件夹：C:\Program Files\Git\etc
			注：cd命令不支持转换路径下有特殊字符，很自然的会想到利用转义字符故命令方式为 cd C:/Program\ Files/Git/etc
		vimrc: 容易猜测应该是vim编辑器的配置文件
	# 4.通过远端编辑文件
		远端编辑文件同样需要相应的提交信息
		在远端编辑的改变直接在本地库中利用git status无法找出对应的改变，由此也与git只是追踪本地库的修改相对应
		利用git pull origing master来同步相应的信息

	# 5.git add可以利用字符匹配进行多个文件同时提交也可以直接在git add后一次添加多个文件名实现提交多个文件，也可以提交文件夹
	# 6.本地库中的文件状态
		untrack: 未被跟踪状态，可以用过git add变为modified状态
	# 7.关于git实现的一些猜想
		git的优势在于其实现速度，尤其是在对分支进行操作时
		git利用指针取实现分支的操作
			HEAD指向最新一次的提交的分支
			当创建新的分支的时候相当于创建了一个新的指针指向创建的分支
			example: git branch dev # 创建一个指针指向dev分支
			
		git对于文件修改的追踪不是对于文件增量的追踪而是对文件系统的追踪，在每次提交的时候git保存了一个此时文件系统的一个状态，
		因此这就实现了在回退到过去的某一状态时只需要读取过去某一时刻的快照即可，
		相对于追踪文件的增量的实现方式，每次返回过去的状态则需要进行多次回溯
		git的历史记录很像是树这一数据结构，故猜想整个git的实现框架是基于树的实现
删除仓库中的文件
	 rm test.txt #从当地删除（物理删除）
	 git status
	 git rm test.txt #从本地库删除
	 git commit -m "remove test.txt"
	 git push #push前必须有git commit动作
删除仓库中的文件夹
	rm test -r -f
	git rm test -r -f #其他同文件删除操作
git创建标签
	git tag <name> 为当前分支，最新commit创建标签
	git tag 显示当前分支拥有的标签
	创建带有说明的标签，用-a指定标签名，-m指定说明文字
	git tag -a v0.1 -m "version 0.1 released"
	git show <tagname> 查看说明文字
	git push origin --tags 提交所有创建的标签到远端
